(load "browser-util.scm")
(define (test)
  (let loop1
      ((op "move")
       (target #f)
       (selector #f)
       (unfinished #t))
    (display "Pick a tool.")
    ;; For now this with-handlers clause doesn't do anything, but it will be modified to.
    (with-handlers ((click-handler "#move"))
      (let* ((input (get-input))
	     (event-type (js-ref (first input) "name"))
	     (event (second input)))
	(set! op "move")
	(console-log "move")
	(console-dir event)
	(display "You have chosen the Move tool.")))
	
    (while unfinished
      (with-handlers ((dragstart-handler "#canvas") ;; Change the selector after testing.
		      (dragover-handler "#canvas")
		      (drop-handler "#canvas"))
	(let* ((input (get-input))
	       (event-type (js-ref (first input) "name"))
	       (event (second input))
	       (original-event #f)
	       (data-transfer #f))
	  (case event-type
	    (("dragstart")
	     (display "dragstart")
	     (console-log "dragstart")
	     (set! target (js-ref event "target"))
	     (console-log target)
	     (display "Set selector")
	     (console-log "Set selector")
	     ;; FIXME: This means of calling select looks more complicated than necessary.
	     (set! selector (js-invoke (js-eval "OptimalSelect") "select" target))
	     (console-log event)
	     (console-dir event)
	     (console-log (format #f "selector => ~a" selector))
	     (console-dir (js-ref event "originalEvent"))
	     (set! original-event (js-ref event "originalEvent"))
	     (set! data-transfer (js-ref original-event "dataTransfer"))
	     (js-invoke data-transfer "setData" "text/plain" selector))
	     ;;(js-invoke (js-ref event "originalEvent.dataTransfer") "setData" "text/plain" selector))
	    (("dragover")
	     ;;(console-log "dragover")
	     ;;(console-dir event)
	     (js-invoke event "preventDefault")
	     (js-set! event "originalEvent.dataTransfer.dropEffect" "move"))
	    (("drop")
	     (display "drop")
	     (console-log "drop")
	     (js-invoke event "preventDefault")
	     (perform-operation op event)
	     (console-log "Operation finished.")
	     (set! unfinished #f))))))
    (loop1)))

(define (perform-operation op ev)
  (console-log (format #f "Operation: ~a" op))
  (case op
    (("move")
     (console-dir ev)
     (console-dir (getelem1 "#div"))
     (js-invoke (js-ref ev "target") "appendChild" (getelem1 "#div")))
    (else
     (display "Unknown operation"))))
